name: CI
on:
  workflow_call:
    inputs:
      docker_image_local_name:
        description: "The local name of the Docker image"
        required: true
        type: string
      dockerhub_username:
        description: "The Docker Hub username"
        required: true
        type: string
      nodejs_version:
        description: "The version of Node.js"
        required: false
        default: 18
        type: string
      kubernetes_version:
        description: "The version of Kubernetes"
        required: false
        default: 1.25.3
        type: string
      knative_version:
        description: "The version of Knative"
        required: false
        default: 1.9.0
        type: string
      skaffold_version:
        description: "The version of Skaffold"
        required: false
        default: 2.1.0
        type: string
    secrets:
      dockerhub_password:
        description: "The Docker Hub password"
        required: true

jobs:
  ci:
    runs-on: buildjet-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v3
        timeout-minutes: 2
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.nodejs_version }}
        timeout-minutes: 2
      - name: Get npm cache directory
        id: npm-cache
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
        timeout-minutes: 5
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ inputs.nodejs_version }}-${{ hashFiles('**/package-lock.json') }}
        timeout-minutes: 5
      - name: Install dependencies
        run: npm ci
        timeout-minutes: 5
      - run: npm run static-checks
        timeout-minutes: 3
      - run: npm test
        timeout-minutes: 5

      # Functional tests
      - name: Create Kind cluster
        uses: helm/kind-action@v1.5.0
        with:
          cluster_name: default
          kubectl_version: "v${{ inputs.kubernetes_version }}"
        timeout-minutes: 2
      - name: Setup Knative
        run: |-
          set -o nounset
          set -o errexit
          set -o pipefail
          set -x

          echo "Installing kn..."
          curl \
            -o /usr/local/bin/kn \
            https://github.com/knative/client/releases/download/knative-v${KN_VERSION}/kn-linux-amd64
          chmod +x /usr/local/bin/kn
          
          echo "Installing kn-quickstart..."
          curl \
            -o /usr/local/bin/kn-quickstart \
            https://github.com/knative-sandbox/kn-plugin-quickstart/releases/download/knative-v${KN_VERSION}/kn-quickstart-linux-amd64
          chmod +x /usr/local/bin/kn-quickstart

          kn quickstart kind \
            --name=default \
            --kubernetes-version=${KUBERNETES_VERSION} \
            --install-serving \
            --install-eventing
        env:
          KN_VERSION: ${{ inputs.knative_version }}
          KUBERNETES_VERSION: ${{ inputs.kubernetes_version }}
        timeout-minutes: 3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ inputs.dockerhub_username }}
          password: ${{ secrets.dockerhub_password }}
        timeout-minutes: 2
      - name: Run Skaffold pipeline
        uses: hiberbee/github-action-skaffold@1.24.0
        with:
          command: run
          skaffold-version: ${{ inputs.skaffold_version }}
          kubectl-version: ${{ inputs.kubernetes_version }}
        timeout-minutes: 10
      - run: npm run test:functional
        env:
          IS_GITHUB: 'true'
        timeout-minutes: 3

      # Export Docker image so it can be published
      - name: Export Docker image
        run: |-
          set -o nounset
          set -o errexit
          set -o pipefail
          
          DOCKER_IMAGE_TAG="$(docker images "${{ inputs.docker_image_local_name }}" --format '{{.Tag}}' | tail -1)"
          docker tag "${{ inputs.docker_image_local_name }}:${DOCKER_IMAGE_TAG}" "${GITHUB_REPOSITORY}:ci"
          docker save -o /tmp/docker-image "${GITHUB_REPOSITORY}:ci"
        timeout-minutes: 3
      - name: Upload Docker image
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: /tmp/docker-image
        timeout-minutes: 5

      - name: Output diagnostic information upon failure
        if: failure()
        run: .github/scripts/output-diagnostics.sh
        timeout-minutes: 2
